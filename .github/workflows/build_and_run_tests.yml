name: Build and run tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-linux-qnn-and-run-tests:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Update Submodule
        run: |
          git submodule foreach --recursive git fetch
          git submodule foreach --recursive git reset --hard
          git submodule update --init --recursive --checkout
          git submodule update --recursive
      - name: Build Linux Debug
        run: docker/docker_compose_compile.sh -r -d --build-linux-x64 --qnn-only
      - name: Run test-backend-ops cpu
        run: docker/docker_compose_run_test.sh -b cpu
  build-android-qnn:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Update Submodule
        run: |
          git submodule foreach --recursive git fetch
          git submodule foreach --recursive git reset --hard
          git submodule update --init --recursive --checkout
          git submodule update --recursive
      - name: Build Debug
        run: docker/docker_compose_compile.sh -r -d --qnn-only
      - name: Build Release
        run: docker/docker_compose_compile.sh -r --qnn-only
  build-android-hexagon-npu:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Update Submodule
        run: |
          git submodule foreach --recursive git fetch
          git submodule foreach --recursive git reset --hard
          git submodule update --init --recursive --checkout
          git submodule update --recursive
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Debug
        run: docker/docker_compose_compile.sh -r -d --enable-hexagon-backend --enable-dequant
      - name: Build Release
        run: docker/docker_compose_compile.sh -r --hexagon-npu-only --enable-dequant
  build-windows-qnn:
    timeout-minutes: 20
    runs-on: windows-latest
    env:
      QNN_VERSION: 2.36.0.250627
      QNN_BASE_PATH: 'C:\qnn_sdk'
      QNN_BUILD_PRESET: arm64-windows-llvm-debug
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Update Submodule
        run: |
          git submodule foreach --recursive git fetch
          git submodule foreach --recursive git reset --hard
          git submodule update --init --recursive --checkout
          git submodule update --recursive
      - name: Install Ninja
        run: |
          choco install ninja
      - name: Cache Qualcomm Ai Engine SDK
        id: cache-qnn-sdk
        uses: actions/cache@v4
        with:
          path: ${{ env.QNN_BASE_PATH }}
          key: qnn-${{ env.QNN_VERSION }}-${{ runner.os }}
      - if: ${{ steps.cache-qnn-sdk.outputs.cache-hit != 'true' }}
        name: Install Qualcomm Ai Engine SDK
        id: get-qnn-sdk
        run: |
          curl.exe -o $env:RUNNER_TEMP/v${env:QNN_VERSION}.zip -L "https://softwarecenter.qualcomm.com/api/download/software/sdks/Qualcomm_AI_Runtime_Community/All/${env:QNN_VERSION}/v${env:QNN_VERSION}.zip"
          7z x $env:RUNNER_TEMP/v${env:QNN_VERSION}.zip -o"${env:QNN_BASE_PATH}"
      - name: Set up QNN SDK envs
        run: |
          Add-Content $env:GITHUB_ENV "QNN_SDK_PATH=${env:QNN_BASE_PATH}/qairt/${env:QNN_VERSION}"
      - name: Build
        run: |
          cd llama.cpp
          cmake --preset "${env:QNN_BUILD_PRESET}" -DGGML_OPENMP=OFF -DGGML_QNN=ON -DBUILD_SHARED_LIBS=OFF -DLLAMA_CURL=OFF -DGGML_QNN_SDK_PATH="${env:QNN_SDK_PATH}"
          cmake --build "build-${env:QNN_BUILD_PRESET}" --clean-first -j ${env:NUMBER_OF_PROCESSORS}
